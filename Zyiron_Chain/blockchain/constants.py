import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from decimal import Decimal





class Constants:
    """
    Centralized configuration for blockchain constants, covering mining, transaction fees, UTXO management,
    mempool, smart contracts, and network behavior.
    """
        # üîπ **Versioning & Network Configuration**
    VERSION = "1.0.0"  # ‚úÖ Defines the current version of the blockchain

    # üîπ **Network Configuration**
    AVAILABLE_NETWORKS = ["mainnet", "testnet"]  # ‚úÖ Allowed network types
    NETWORK = "mainnet"  # üåê Default network (Switch to 'testnet' when needed)

    # ‚úÖ Validate the network setting
    if NETWORK not in AVAILABLE_NETWORKS:
        raise ValueError(f"[ERROR] Invalid network: {NETWORK}. Must be 'mainnet' or 'testnet'.")

    # üîπ **Address Prefixes (Mainnet & Testnet)**
    MAINNET_ADDRESS_PREFIX = "KYC"
    TESTNET_ADDRESS_PREFIX = "KYT"

    # ‚úÖ Dynamically selects the correct address prefix
    ADDRESS_PREFIX = MAINNET_ADDRESS_PREFIX if NETWORK == "mainnet" else TESTNET_ADDRESS_PREFIX

    # üîπ **Genesis & Mining Parameters**
    GENESIS_TARGET = 0x000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  
    MIN_DIFFICULTY = 0x000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  
    MAX_DIFFICULTY = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  

    # üîπ **Difficulty Adjustment Parameters**
    TARGET_BLOCK_TIME = 300  # ‚è≥ **5-minute block time**
    DIFFICULTY_ADJUSTMENT_INTERVAL = 2  # üîÑ **Adjust difficulty every 2 blocks**
    MIN_DIFFICULTY_FACTOR = 0.85  # ‚¨áÔ∏è **Max decrease: 15%**
    MAX_DIFFICULTY_FACTOR = 4.0  # ‚¨ÜÔ∏è **Max increase: 400%**
    
    # üîπ **Hashing & Security**
    ZERO_HASH = "0" * 96  # üìå **SHA3-384 produces 96-character hex hashes**
    # üîπ **SHA3-384 Hash & Difficulty Target Settings**
    SHA3_384_HASH_SIZE = 96  # ‚úÖ **SHA3-384 produces 96-character hex hashes**
    DIFFICULTY_TARGET_SIZE = 384  # ‚úÖ **Target size in bits for SHA3-384 difficulty calculations**
    # üîπ **Maximum Block Size**
    MAX_BLOCK_SIZE_BYTES = 10 * 1024 * 1024  # üöÄ 10MB (10 * 1024 * 1024 bytes)

    # üîπ **Coin Economics**
    MAX_SUPPLY = 84_096_000  # ü™ô **Max coin supply**
    INITIAL_COINBASE_REWARD = 100.00  # üéÅ **Initial mining reward**
    BLOCKCHAIN_HALVING_BLOCK_HEIGHT = 420_480  # üìâ **Halves every ~4 years (~5 min block time) until max supply**
    # üîπ **Smallest Unit Definition**
    COIN = Decimal("0.00000001")  # ‚úÖ Smallest unit of the currency 


# üîπ **Transaction Confirmation Requirements**
    TRANSACTION_CONFIRMATIONS = {
        "STANDARD": 8,   # ‚úÖ Standard transactions require 8 confirmations
        "SMART": 5,      # ‚úÖ Smart contract transactions require 5 confirmations
        "INSTANT": 2,    # ‚úÖ Instant transactions require 2 confirmations
        "COINBASE": 12   # ‚úÖ Coinbase transactions require 12 confirmations
    }

    # üîπ **Mempool Configuration**
    # üîπ **Mempool Storage & Allocation Settings**
    MEMPOOL_MAX_SIZE_MB = 2048  # üèóÔ∏è **Total Mempool Storage Capacity (MB)**
    
    # ‚úÖ **Mempool Type Allocations**
    MEMPOOL_STANDARD_ALLOCATION = 0.50  # üè¶ **50% of total mempool reserved for Standard Transactions**
    MEMPOOL_SMART_ALLOCATION = 0.50  # üß† **50% of total mempool reserved for Smart Transactions**

    # ‚úÖ **Block Inclusion Allocations (Dynamic per Block)**
    BLOCK_ALLOCATION_SMART = 0.50  # üß† **50% of the block is reserved for Smart Transactions**
    BLOCK_ALLOCATION_STANDARD = 0.50  # üè¶ **50% of the block is reserved for Standard Transactions**

    # ‚úÖ **Specialized Space Allocations for Transaction Types**
    INSTANT_PAYMENT_ALLOCATION = 0.30  # ‚ö° **Instant Transactions get 30% of the total block space**
    STANDARD_TRANSACTION_ALLOCATION = 0.20  # üè¶ **Standard Transactions get 20% of the total block space**

    # ‚úÖ **Mempool Transaction Expiry Policy**
    MEMPOOL_TRANSACTION_EXPIRY = 86400  # ‚è≥ **Transactions expire after 24 hours in the mempool**
    MAX_LMDB_DATABASES= 10


    # üîπ **Instant Payment & HTLC Settings**a
    HTLC_LOCK_TIME = 120  # ‚è≥ **HTLC lock expires in 2 minutes**
    HTLC_EXPIRY_TIME = 7200  # ‚è≥ **HTLC expires after 2 hours (ZKP-based)**
    INSTANT_PAYMENT_TTL = 600  # ‚ö° **Instant payments must be confirmed within 10 minutes**
    PAYMENT_CHANNEL_INACTIVITY_TIMEOUT = 7200  # ‚è≥ **Payment channels auto-close after 2 hours of inactivity**

    # üîπ **Dynamic Fee Adjustment**
    MIN_TRANSACTION_FEE = 0.100000000  # ‚ö†Ô∏è **Minimum possible fee per transaction**
    FEE_INCREMENT_FACTOR = 1.10  # üîº **Increase fee by 10% if rebroadcasted**

    # üîπ **Transaction Expiry & Disputes**
    TRANSACTION_EXPIRY_TIME = 86400  # ‚è≥ **Transactions expire after 24 hours in mempool**
    DISPUTE_RESOLUTION_TTL = 3600  # ‚öñÔ∏è **Transactions must be resolved within 1 hour**

    # üîπ **Multi-Hop Payment Channels**
    MULTIHOP_MIN_CHANNEL_LIFETIME = 3600  # ‚è≥ **1-hour min channel open time**
    MULTIHOP_MAX_HOPS = 10  # üîÑ **Max 10 hops per transaction**
    MULTIHOP_REBROADCAST_TIMEOUT = 180  # ‚è≥ **Rebroadcast pending multi-hop transactions after 3 minutes**

    # üîπ **Storage Layer (Databases & Routing)**
    DATABASES = {
        "blockchain": "UnQLite",
        "mempool": "LMDB",
        "utxo": "SQLite",
        "analytics": "DuckDB",
        "tinydb": "TinyDB",  # ‚úÖ **Added TinyDB for lightweight storage**
    }

    # üîπ **Smart Mempool Priority Blocks**
    SMART_MEMPOOL_PRIORITY_BLOCKS = (4, 5)  # ‚úÖ **Smart transactions prioritized in block confirmations**

    # üîπ **Rebroadcasting & Fee Scaling**
    REBROADCAST_INTERVAL = 300  # ‚è≥ **Rebroadcast unconfirmed transactions every 5 minutes**
    REBROADCAST_FEE_INCREASE = 0.10  # üîº **Increase fee by 10% upon rebroadcast**



    # üîπ **Confirmation Definitions**
    CONFIRMATION_RULES = {
        "description": "A transaction confirmation occurs when a block containing the transaction is mined and added to the blockchain. Each new block built on top of this confirms the transaction further.",
        "minimum_required": 1,  # ‚úÖ Minimum confirmations for a transaction to be considered valid
        "finalization_threshold": 6,  # ‚úÖ Number of confirmations required for finalization (irreversible status)
        "coinbase_requirement": 12,  # ‚úÖ Coinbase transactions require 12 confirmations before funds are spendable
    }



    # üîπ **Transaction Prefixes & Mempool Routing**
    TRANSACTION_MEMPOOL_MAP = {
        "STANDARD": {
            "prefixes": [],
            "mempool": "StandardMempool",
            "database": "LMDB"
        },
        "SMART": {
            "prefixes": ["S-"],
            "mempool": "SmartMempool",
            "database": "LMDB"
        },
        "INSTANT": {
            "prefixes": ["PID-", "CID-"],
            "mempool": "StandardMempool",
            "database": "LMDB"
        },
        "COINBASE": {
            "prefixes": ["COINBASE-"],
            "mempool": "StandardMempool",
            "database": "UnQLite"
        }
    }
